

1000 50 -> 3015/100000 (753 rules)
1000 500 -> 3186/10000 (1195 rules)

1000 50 -> 3015 (760 rules) (14min)



neo4j:

git clone https://github.com/majensen/libneo4j-client.git libneo4j-client-v4
cd libneo4j-client-v4
./autogen.sh
./configure --prefix=`pwd`/../libneo4j-client-v4-install --disable-tools --disable-werror
make install

docs: https://neo4j-client.net/doc/latest/neo4j-client_8h.html

Add to hashcat Makefile:

NEO4J_FLAGS=$(shell PKG_CONFIG_PATH=../libneo4j-client-v4-install/lib/pkgconfig/ pkg-config --cflags --libs neo4j-client)
gengraph: gengraph.c obj/combined.LINUX.a
	$(CC_LINUX) $(CCFLAGS) $(CFLAGS_NATIVE) $(LFLAGS_NATIVE) $(NEO4J_FLAGS) -g -o gengraph gengraph.c obj/combined.LINUX.a


Procedure:

- start with initial list of passwords
- run hashcat -stdout with set of rules (say, base64)
- make graph edge between every input password and resulting password and the applied rule
- repeat for every node in the resulting graph, though tacking care not to use a rule on a password again (i.e., where an edge already exists)

- track which rules and which passwords are being successful (matching something from the original passwords list; use a hashmap to find out), and prefer those (how?)
  - make a priority queue so successful passwords/rules are explored earlier?


Run:
LD_LIBRARY_PATH=../libneo4j-client-v4-install/lib/ ./gengraph ../passwords.txt rules/best64.rule

